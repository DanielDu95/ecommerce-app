diff --git a/node_modules/next-auth/core/lib/oauth/client.js b/node_modules/next-auth/core/lib/oauth/client.js
index 52c51eb..5b1bd8c 100644
--- a/node_modules/next-auth/core/lib/oauth/client.js
+++ b/node_modules/next-auth/core/lib/oauth/client.js
@@ -4,10 +4,23 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.openidClient = openidClient;
+
 var _openidClient = require("openid-client");
+var {HttpsProxyAgent} = require("https-proxy-agent");
+
 async function openidClient(options) {
   const provider = options.provider;
-  if (provider.httpOptions) _openidClient.custom.setHttpOptionsDefaults(provider.httpOptions);
+
+  let httpOptions = {};
+  if (provider.httpOptions) {
+    httpOptions = { ...provider.httpOptions };
+  }
+  if (process.env.http_proxy) {
+    const agent = new HttpsProxyAgent(process.env.http_proxy);
+    httpOptions.agent = agent;
+  }
+  _openidClient.custom.setHttpOptionsDefaults(httpOptions);
+
   let issuer;
   if (provider.wellKnown) {
     issuer = await _openidClient.Issuer.discover(provider.wellKnown);
@@ -21,12 +34,14 @@ async function openidClient(options) {
       jwks_uri: provider.jwks_endpoint
     });
   }
+
   const client = new issuer.Client({
     client_id: provider.clientId,
     client_secret: provider.clientSecret,
     redirect_uris: [provider.callbackUrl],
     ...provider.client
   }, provider.jwks);
+
   client[_openidClient.custom.clock_tolerance] = 10;
   return client;
 }
